WEBVTT

00:02.400 --> 00:07.430
We're almost at the end of this routing Marchal a lot of content was covered here.

00:07.620 --> 00:14.190
Now there's one important thing you have to know regarding routing when using you react router when

00:14.190 --> 00:19.650
it comes to the poloi in your app to a real server because you won't notice it here on the development

00:19.650 --> 00:22.460
server because it's already configured correctly.

00:22.500 --> 00:27.280
You have to remember how handling requests actually works in the web.

00:27.510 --> 00:33.810
We have the user who sends a request to the server and we have our re-act app which is then loaded on

00:33.810 --> 00:36.030
the index HVM elde page.

00:36.060 --> 00:43.890
The thing is before we load to index h email page the server needs to find out which page the user actually

00:43.890 --> 00:44.900
wanted to visit.

00:45.090 --> 00:48.670
That of course is the case because the server always handles requests first.

00:48.720 --> 00:51.390
This is how the Internet works.

00:51.390 --> 00:55.830
The problem is it's the Riak that which knows the routes.

00:55.920 --> 01:04.050
So if we wisit slash posts there is no slash posts route on our server that is defined in the javascript

01:04.050 --> 01:11.640
code which is loaded on the index HTL page which we never get because we get a 4 0 for error on the

01:11.640 --> 01:15.610
server because we tried to wisit a route which is unknown to the server.

01:15.810 --> 01:20.820
And clearly this is not what you saw during development because as I said the development server is

01:20.820 --> 01:22.800
already configured correctly.

01:22.920 --> 01:30.720
We have to configure the server in a way that it always forewards requests no matter if it understands

01:30.720 --> 01:31.670
them or not.

01:31.710 --> 01:40.500
So also for for error or requests to the client so that it always returns the index team l page also

01:40.500 --> 01:48.750
for on known requests because this then allows react to take over and parse the request against the

01:48.750 --> 01:50.360
routes it knows.

01:50.610 --> 01:53.050
So we should always load index H.T..

01:53.360 --> 01:55.910
And if then there is a request we dont know.

01:55.950 --> 02:01.280
Well you learned how to handle a 4 for errors with the re-act router.

02:01.320 --> 02:08.090
Now as I said the development server we used here already is configured to always load the next age

02:08.080 --> 02:09.150
team file.

02:09.270 --> 02:14.330
It is something you will also have to do when hosting the app on your own server though.

02:14.550 --> 02:16.710
Always return in next HVM out.

02:16.920 --> 02:21.940
Even and especially in 4 0 for error cases.

02:22.060 --> 02:27.120
Is one other thing you have to be aware of when hosting your app on your server.

02:27.360 --> 02:30.970
If you are hosting it on let's say exampled dot com slash nothing.

02:30.990 --> 02:35.910
So if that's the page with which we're landing on the route page of your react app you don't need to

02:35.940 --> 02:42.240
set up anything special but if you're serving your app from let's say example the com slash my app so

02:42.240 --> 02:45.560
anything beneath that folder should be your react.

02:45.870 --> 02:48.050
You need to tell re-act about this.

02:48.100 --> 02:50.150
You react router to be precise.

02:50.340 --> 02:57.780
You need to set the base off for the react router and I want to quickly show you how to do that in your

02:57.780 --> 02:58.750
application.

02:58.830 --> 03:01.210
In the place where you use browser router.

03:01.260 --> 03:07.560
So in our case and he actually has file here browser router you can also configure dat And you really

03:07.560 --> 03:08.660
need to do that.

03:08.820 --> 03:14.520
But there is a basename prop you can set and by default that's set to slash.

03:14.760 --> 03:17.310
So this is the default but you don't need to set.

03:17.520 --> 03:26.460
If your serving your app from my app you should set this to slash my app then all your requests are

03:26.460 --> 03:31.940
routed against my app slash and then the link you were pointing to.

03:32.010 --> 03:36.200
Otherwise if you had a link like here.

03:36.240 --> 03:44.640
If you push the page change up on clicking post here we navigate to slash posts and it would always

03:44.700 --> 03:47.180
add this to your root domain.

03:47.190 --> 03:54.750
Now if you were re-act app is served from slash my app it will only work correctly and added to the

03:54.750 --> 03:57.110
end of your domain slash my app.

03:57.240 --> 04:04.860
If basename is set up so whenever you are serving your app from a sub directory make sure to set basename.

04:04.950 --> 04:11.790
So here I will remove basename or all duplicated and commented out to leave it here for reference and

04:11.790 --> 04:13.000
remove it in the browser.

04:13.020 --> 04:16.490
We're actually using But this is something you have to know.
