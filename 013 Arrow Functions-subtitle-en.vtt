WEBVTT

00:02.340 --> 00:08.140
You'll learn about LET and Konst a number thing and number construct you're going to see a lot and of

00:08.160 --> 00:11.080
course our aero functions.

00:11.460 --> 00:15.890
That's a different syntax for creating Javascript functions.

00:15.960 --> 00:18.540
A normal javascript function of course looks like this.

00:18.540 --> 00:27.450
With the function keyword You might also note a syntax where you have bar my fonk equals function.

00:27.540 --> 00:30.230
Now an arrow function looks like this.

00:30.270 --> 00:34.160
Here I'm storing it in a constant and then on the right side of the equals sign.

00:34.290 --> 00:36.750
That's the arrow function syntax.

00:36.840 --> 00:42.540
A list of arguments here it's on but could hold some arguments and then an arrow.

00:42.720 --> 00:47.280
So an equal sign and a greater than sign and then the function body.

00:47.280 --> 00:52.920
The arrow function index is a bit shorter than the normal syntax since it omits the function keyword

00:53.550 --> 00:56.700
and it also and that is the great benefit.

00:56.700 --> 00:59.810
Solves a lot of the issues you often had with that.

00:59.810 --> 01:02.710
This keyword in javascript.

01:02.940 --> 01:10.290
If you've worked with javascript a bit you probably know that this keyword doesn't always refer to what

01:10.290 --> 01:15.180
you might have expected it to refer to during your writing your code.

01:15.180 --> 01:22.830
When you use this inside the arrow function it will always keep its context and not changed surprisingly

01:22.830 --> 01:24.450
on runtime.

01:24.450 --> 01:28.130
So let's now move to J spend to see that arrow function syntax.

01:28.140 --> 01:31.320
In practice back in J Espin.

01:31.380 --> 01:37.980
Let's create a normal function print my name like this.

01:38.890 --> 01:47.030
Now here we can of course output console log name and pass name as the argument.

01:47.220 --> 01:54.930
Now if I call print my name like this and had control after we get on the find because I didn't pass

01:54.930 --> 01:59.200
anything for it do the same with Max passed as an argument.

01:59.250 --> 02:07.410
We get max now at the arrow function the equivalent is to start us in a constant named print my name.

02:07.410 --> 02:09.630
It could also be created with LET.

02:09.660 --> 02:15.410
If you plan on re-assigning this variable print my name as a constant.

02:15.520 --> 02:22.450
And now don't forget to add this arrow between the list of arguments and the function body is now clear

02:22.480 --> 02:24.610
and rerun this you'll still see Max.

02:24.610 --> 02:27.630
So here it behaves exactly in the same way.

02:27.640 --> 02:30.820
Now the this keyword thing is something you'll see for the course.

02:30.850 --> 02:35.060
It becomes important once you add functions to object of course.

02:35.140 --> 02:40.960
First of all let me show you some alternatives to disinfects though regarding the argument list.

02:40.960 --> 02:48.370
To be precise if you only receive one argument as we do here you can also use a shortcut of omitting

02:48.430 --> 02:49.850
the parentheses around it.

02:50.020 --> 02:56.720
That's only valid for exactly one argument though not for more and not for last here.

02:56.740 --> 03:04.170
You will still get the same result if you had a function which receives no arguments.

03:04.180 --> 03:06.270
This is not valid syntax.

03:06.340 --> 03:11.750
You need to pass an empty pair of parentheses like this.

03:11.860 --> 03:15.600
If we execute this now we also still see Max.

03:15.610 --> 03:19.080
So this works if you have more than one argument.

03:19.090 --> 03:20.740
You also need parentheses.

03:20.740 --> 03:23.410
So name and age like this won't work.

03:23.470 --> 03:26.950
You will need to wrap this in parentheses.

03:26.950 --> 03:33.550
And now you could output name and age and past both as arguments here.

03:33.910 --> 03:38.310
So these are two different syntax us you might see regarding the arguments.

03:38.380 --> 03:40.000
There also is an alternative.

03:40.000 --> 03:41.870
Regarding the function body.

03:41.950 --> 03:47.780
So on the right side of the arrow obviously a lot of functions just return something.

03:48.010 --> 03:58.920
So let's say here we actually want to multiply something and we get a number as an argument.

03:58.920 --> 04:08.490
Now we want to return number times to obviously what we can do is we can console locked the result of

04:08.490 --> 04:09.180
multiply.

04:09.180 --> 04:12.690
So Watts returned by multiply and passed to here.

04:12.870 --> 04:16.620
If I now cleared as and run this we should see four and we do.

04:16.740 --> 04:24.960
If you have this case where all you do in your function body is return and you have no other code in

04:24.960 --> 04:35.010
there you can omit the Cauley braces and write this in one line and then you all have to admit the return

04:35.010 --> 04:39.670
keyword does is a very short question of writing this function.

04:39.690 --> 04:44.820
It gets a bit shorter if we take advantage of the shortcut of removing the parentheses around the single

04:44.820 --> 04:46.260
argument.

04:46.260 --> 04:50.310
And now what this does is it still returns the result of this code.

04:50.310 --> 04:54.230
Here we just omit the return keyword and we have two emitted.

04:54.450 --> 05:00.480
And we have a very concise and short way of writing a function that takes one or more arguments and

05:00.480 --> 05:01.860
returns something.

05:01.860 --> 05:05.690
So here clearing and running does still yields 4.

05:06.090 --> 05:11.430
So this is all the syntax you might see and the function in general is something you'll see a lot.

05:11.430 --> 05:13.540
You saw the various syntax us.

05:13.650 --> 05:16.020
You don't have to remember all of them right now.

05:16.050 --> 05:21.240
Just be aware that there are difference in Texas and if we don't use them they'll quickly come back

05:21.240 --> 05:24.960
to your mind and you know why we use a given syntax.
