WEBVTT

00:02.050 --> 00:05.930
In the last lecture we learn how to use nested routes.

00:05.950 --> 00:13.390
Now you might have noticed one thing maybe even earlier when we are on a given post and we click on

00:13.390 --> 00:21.170
a different post we don't actually load debt though you can see in the R L that the ID changes.

00:21.460 --> 00:26.110
So it is registering the click but it isn't loading the new component.

00:26.140 --> 00:33.340
Now the reason for this is dead re-act router behind the scenes doesn't replace the component all the

00:33.340 --> 00:34.230
time.

00:34.300 --> 00:41.950
If you're loading a component on which you're already on like we are here it won't really render the

00:41.950 --> 00:50.260
whole component and therefore for the full post component did mount isn't executed again because why

00:50.260 --> 00:51.520
would it do that.

00:51.520 --> 00:57.850
Decompose it itself didn't change it would be very inefficient to unmount it and remounted.

00:57.850 --> 01:05.380
So since components did mount isn't executed again though we're not reaching out to the web again.

01:05.500 --> 01:12.490
So to fix this what we should do is we should also implement component did update to handle this case

01:12.780 --> 01:16.220
because it did update will be executed again.

01:16.600 --> 01:25.330
And I will add a new method load data convenience method which will simply hold my old code here where

01:25.360 --> 01:32.710
I reach out to the web and load my data because now I want to call this both in component mount and

01:32.710 --> 01:39.670
component that update so this load data will be called in both lifecycle hooks so that I'm prepared

01:39.700 --> 01:46.520
both for the first time this single post gets loaded and the second time.

01:46.540 --> 01:52.220
Now however do you see by the console log already we have an infinite loop.

01:52.300 --> 01:55.060
So this is not the perfect solution.

01:55.060 --> 01:59.470
I click on a link here and it keeps on loading again.

01:59.740 --> 02:04.640
So definitely not what we want to do what's wrong with our current setup here.

02:05.520 --> 02:13.540
Well it's our check in load data we're checking if our idea changed and we're checking for this proper

02:13.620 --> 02:14.500
ID.

02:14.610 --> 02:21.210
Now just as everywhere else here this needs to be this prop's match Perrin's ID this prop's ID will

02:21.210 --> 02:22.250
never be set.

02:22.410 --> 02:27.930
So we had the same infinite loop problem we had in the HD section because our check here wasn't working

02:27.930 --> 02:33.390
anymore and we not only need to update this here we need to update it everywhere and as component where

02:33.390 --> 02:40.230
we referenced this prop's ID of course also here are why is deleting would never work.

02:40.230 --> 02:46.580
And of course also down here where we check if the ID is set.

02:46.710 --> 02:53.220
Now with all these changes in place it would still not work because the ID were retrieving from the

02:53.220 --> 02:57.480
proud parents is actually going to be a string.

02:57.480 --> 03:05.270
Now here we're checking for type equality to anti-ID stored in the loaded post actually is a number.

03:05.280 --> 03:12.060
So we either have to taken words E-string ID to a number or simply turn this into a check or we just

03:12.060 --> 03:14.260
check for the value.

03:14.280 --> 03:17.780
Now if we just check just for the value and click a post.

03:17.910 --> 03:20.850
Now you see it's not loading all the time.

03:20.850 --> 03:26.080
Instead it only loads once but it correctly updates it when we switch to post.

03:26.250 --> 03:31.440
Again the alternative would be to leave the typing quality check but to convert this into a number by

03:31.440 --> 03:34.050
adding a plus in front of it for example.

03:34.050 --> 03:38.220
Now again if I click on a post we loaded we loaded only once.

03:38.220 --> 03:40.010
We don't enter the infinite loop.

03:40.320 --> 03:46.740
This is an important fix to the full post component in general that we use match Perens ID all over

03:46.870 --> 03:53.950
the component and it's also important to understand that you need to handle changes in component.

03:53.970 --> 04:01.800
Did update if DB post component or if component in general is already loaded for routing because the

04:01.800 --> 04:07.350
router will not unmount the old one and mount the same one again with different data.

04:07.350 --> 04:12.320
It will reuse the old one and just adjust the route parameter.

04:12.390 --> 04:20.460
It's your job to react to this new parameter and you can react to that in component that update which

04:20.460 --> 04:23.010
will be called because the props changed.

04:23.070 --> 04:29.840
You receive a new prop's with a new match object with a new parents object with the new ID.

04:29.850 --> 04:31.170
This is what's happening here.

04:31.170 --> 04:32.830
Does what we're taking advantage of.

04:32.910 --> 04:34.530
And this is important to understand.

04:34.660 --> 04:36.780
When working with nested routes.
