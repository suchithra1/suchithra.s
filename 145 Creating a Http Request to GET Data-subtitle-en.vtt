WEBVTT

00:02.030 --> 00:08.340
In the last lecture I walked you from the project will use and for X years the package I recommend for

00:08.460 --> 00:11.970
making HTP requests and re-act applications.

00:12.000 --> 00:14.510
Let's not make such an HTP request.

00:14.730 --> 00:20.960
And for that dummy back and we're using I already showed you do you are ready to send the request to

00:21.130 --> 00:23.700
to get an array of posts.

00:23.700 --> 00:27.990
Now I want to render that array of posts in my block container.

00:28.180 --> 00:30.930
There I have to individual post components.

00:30.930 --> 00:37.410
And of course data should be dynamically generated list of posts a list of posts we fetched from a server

00:37.410 --> 00:39.230
to be precise.

00:39.240 --> 00:47.820
Now where do we make this HTP request then let's have a look at the lifecycle slides again for dad.

00:47.850 --> 00:51.180
Maybe we find a fitting lifecycle hook there.

00:51.240 --> 00:56.250
If we have a look at the lifecycle Hooke's we encountered using component creation.

00:56.250 --> 00:59.660
There is one life cycle that we should use for side effects.

00:59.700 --> 01:04.520
Component did mount and the HGP request is a side effect.

01:04.590 --> 01:11.520
It doesn't affect your re-act logic or something like that but it has the side effect of fetching new

01:11.530 --> 01:18.230
data and if your reactor application is dynamically outputting some data which it probably is the data

01:18.270 --> 01:22.670
changing of course is a side effect affecting your application.

01:23.010 --> 01:29.560
So component did MT is a great place for causing side effects but not for updating state since it triggers

01:29.560 --> 01:30.770
the re render.

01:31.020 --> 01:37.560
We will still update the state here once the HTP request to Stallin got us new data because we actually

01:37.560 --> 01:39.480
want to update the page.

01:39.480 --> 01:46.640
So here is actually a wanted behavior so component did MT is the best place to send the HTP request.

01:46.740 --> 01:53.790
So in the block container Let's implement component did mount and now we need access to sent that request.

01:53.880 --> 01:57.460
So I will import axioms from the actual package.

01:57.680 --> 02:05.640
And now we can use it here in component at Mt X years offers a get method for sending you guessed it

02:05.820 --> 02:07.900
get requests.

02:07.920 --> 02:10.540
This method needs at least one argument.

02:10.580 --> 02:14.120
D You are the one to send this get request to.

02:14.170 --> 02:20.870
So here you are l I copied from the dummy placeholder page with Slash posts at the end.

02:20.880 --> 02:26.700
Now you can also pass a second argument to configure this request and you can learn more about all the

02:26.700 --> 02:28.520
configuration options and so on.

02:28.590 --> 02:33.000
On that get up page discours is of course not mainly about Xs.

02:33.060 --> 02:39.170
So I won't walk for all the set up you can possibly add here but this page is a great starting point.

02:39.180 --> 02:43.880
Still we're about to see some of the things you can do with X for out this module.

02:44.220 --> 02:47.130
Here however I don't need any specific configuration.

02:47.130 --> 02:51.310
I just want to send vanilla normal gets requests to that or else.

02:51.750 --> 02:59.430
The thing of course is this should return some posts but trying to store them in a post constant won't

02:59.430 --> 03:05.110
work because of course that get request happens asynchronously.

03:05.310 --> 03:07.050
It doesn't finish immediately.

03:07.080 --> 03:10.710
It needs some time to go to the server and get the data.

03:11.220 --> 03:15.510
Javascript though executes your code in a synchronous manner.

03:15.570 --> 03:22.440
So after this line the next line is executed immediately it won't pause until this is finished so it

03:22.440 --> 03:25.550
won't store the posts and the posts constant here.

03:25.830 --> 03:33.210
This is the wanted behavior because we don't want to block the execution of our application just because

03:33.210 --> 03:35.400
we're waiting for this request to finish.

03:35.790 --> 03:36.820
X yes.

03:36.810 --> 03:42.600
Therefore uses promises a default javascript object introduced with ESX.

03:42.690 --> 03:46.330
And thanks to our workflow we're using with create react.

03:46.590 --> 03:52.950
Also available in older browsers since the code gets compiled to code which also works in older browsers

03:53.610 --> 04:01.620
so Access uses promises and get returns a promise so we can change then on it then is simply a method

04:01.620 --> 04:08.640
which takes a function SD input and this function will get executed once the promise resolves.

04:08.700 --> 04:16.170
So once the data from the back end is there we can say the function then receives a response object

04:16.200 --> 04:17.340
as an input.

04:17.340 --> 04:23.850
This will be passed into the function automatically by X-ists And let's for now simply print it to the

04:23.850 --> 04:27.560
console so that we can see what's inside of it.

04:27.570 --> 04:34.320
I'll save this code go back to the re-act application and reload the page and we immediately see this

04:34.320 --> 04:36.820
object being printed to the console.

04:36.900 --> 04:43.860
If we expand that we see the status code here and all these properties here are just properties provided

04:43.860 --> 04:45.480
by the access package.

04:45.480 --> 04:48.820
So we got the status quo 200 So it was successful.

04:48.840 --> 04:53.900
We see the request which was send we see the response headers and important for us.

04:53.940 --> 04:58.240
We have the data object which contains the data returned from the server.

04:58.260 --> 05:05.780
We sent the request to and for this dummy placeholder service this simply is an array of javascript

05:05.810 --> 05:09.560
objects where each object should represent a post.

05:09.830 --> 05:15.540
As you can see there we got a title a body an A D and a user id property.

05:15.560 --> 05:21.380
Now we can work with that data and of course one to work with it to render it dynamically to the screen

05:21.380 --> 05:27.020
here and output some posts instead of that dummy content I have right now.
