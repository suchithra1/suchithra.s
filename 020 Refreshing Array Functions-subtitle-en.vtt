WEBVTT

00:02.180 --> 00:07.030
In the last lecture we had a look at reference of primitive types something super important to keep

00:07.030 --> 00:09.800
in mind when working with javascript.

00:10.030 --> 00:14.260
Another thing you will see quite a lot in this course are aere functions.

00:14.260 --> 00:17.240
We already saw filter a couple of Electress ago.

00:17.350 --> 00:20.550
We also got Saward map and so on.

00:20.860 --> 00:22.670
Let me quickly show you what I mean.

00:22.810 --> 00:27.560
The good old number is array with 1 2 and 3.

00:27.970 --> 00:34.510
Now let's say we want to turn this into an array where each number is doubled.

00:34.540 --> 00:41.370
So we have to double numb aere something like debt we can use an array function for this.

00:41.440 --> 00:45.050
We can take the numbers array and call map.

00:45.130 --> 00:47.150
Map is a built in array method.

00:47.170 --> 00:49.070
And there are many of these methods.

00:49.420 --> 00:51.610
I will use quite a lot of them and they're not.

00:51.610 --> 00:57.940
Next generation javascript all these methods work in the same way though they take a function as an

00:57.940 --> 01:04.750
input and this function which is an arrow function here but could be a normal function is then simply

01:04.820 --> 01:09.050
executed on each element in the array here.

01:09.070 --> 01:13.830
So on each element in the numbers 0 8 on 1 and 2 and 3.

01:14.260 --> 01:18.200
So therefore what we get in this arrow function is a number in the end.

01:18.220 --> 01:22.260
But you can name this argument whatever you want here.

01:22.260 --> 01:24.400
We can then simply return something.

01:24.610 --> 01:30.660
And what you have to do in this internal function depends on which area of function you are using.

01:30.670 --> 01:37.010
Check the docs in places like d Mozilla Developer Network docs to learn more about the available area

01:37.100 --> 01:38.470
functions.

01:38.470 --> 01:44.770
So in the map function we have to return the new value we want to turn the old one into so we could

01:44.770 --> 01:49.440
return sometimes too and since is executed on every element here.

01:49.450 --> 01:55.890
It will return to 4 and 6 and conveniently map all the returns a new array.

01:55.900 --> 02:00.720
So a real new array which is then stored in double memory.

02:01.060 --> 02:12.520
So now if my output numbers and there are after double numb array like this and an hour run you'll see

02:12.580 --> 02:19.750
the old one is unchanged but the new one holds double the values and I will explain what these functions

02:19.750 --> 02:21.620
do when we use them in the course.

02:21.850 --> 02:24.590
I just want to bring them to your attention right now.

02:24.670 --> 02:30.730
Explain that they always have this function which gets executed on each element and that they are not

02:30.760 --> 02:36.190
next generation javascript but normal javascript actually be prepared to meet them.

02:36.190 --> 02:41.600
I will explain what they do when we see them and always feel free to dive into docs like the Mozilla

02:41.600 --> 02:43.840
or developer network to learn more about them.
