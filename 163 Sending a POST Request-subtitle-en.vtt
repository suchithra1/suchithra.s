WEBVTT

00:02.150 --> 00:05.490
In the last lecture we created our X-ists instance.

00:05.510 --> 00:08.790
Now it's time to be able to send the requests there.

00:08.840 --> 00:11.220
Now let's figure out where we do this.

00:11.630 --> 00:20.390
Well in our Bergere Boulder container there we have this method where we handle the chase continuation.

00:20.390 --> 00:22.990
Right now we're showing this you continue allert.

00:23.040 --> 00:27.190
Now of course we don't want to show you continue in the final application.

00:27.200 --> 00:31.380
We probably want to navigate the user to some check out for him.

00:31.490 --> 00:35.930
We haven't learned how to load different pages in our single page.

00:35.960 --> 00:40.620
And yes pages in our single page apps sounds strange you'll see how that works soon.

00:40.850 --> 00:45.160
And we also have learned how to handle a form input how to validate this and so on.

00:45.410 --> 00:47.920
So for now there will be a check out form.

00:48.020 --> 00:54.110
We can simply take the order as it is and store it like this with some dummy data appended to it in

00:54.110 --> 00:55.160
the database.

00:55.160 --> 01:02.510
So to do that let's commet out this alert line here and instead of displays here I want to send my data

01:02.660 --> 01:08.960
to my back and I want to make this HTP request so any Bergere bill of filed we should import our own

01:08.990 --> 01:10.390
X-ists instance.

01:10.610 --> 01:17.600
So I'm going to import x years from now I need to go all the way up to the root folder and there from

01:17.600 --> 01:23.240
the X years orders js file is going to use our configured x' instance.

01:23.630 --> 01:30.090
Now we can use that in the paper chase continue handler to send the request to our own packet.

01:30.260 --> 01:37.310
Now for storing data we should use a post request and therefore we use the post method on that instance.

01:37.310 --> 01:42.950
Now your L is of course now our base you are L plus whatever we're adding here.

01:43.160 --> 01:48.770
And that's the cool thing about firebase eyes set that it uses as Mongo D-B like structure.

01:48.770 --> 01:50.540
We don't actually have tables here.

01:50.630 --> 01:57.800
We just have Jason like nested structure and if you send a request to something like this you are l

01:57.860 --> 01:59.640
slash orders.

01:59.690 --> 02:04.950
It's going to create our orders node and store our orders beneath that node.

02:05.180 --> 02:06.950
And this is exactly what I want to do.

02:07.130 --> 02:14.960
I'll add slash orders here and now for firebase only there is a special thing you need to add dot Jason

02:14.960 --> 02:15.710
here.

02:15.710 --> 02:20.390
This is the end point you just need to target for firebase to function correctly.

02:20.390 --> 02:25.940
Of course in your next project you probably have your own back end or you use some average service and

02:25.940 --> 02:28.880
you need to choose the appropriate end point there.

02:28.940 --> 02:32.790
For firebase it's any node name of your choice datt.

02:32.810 --> 02:40.170
Jason So that's the you or I want to send a request to d l which gets appended to my base your elbow

02:40.180 --> 02:42.960
or the path which gets appended to our base your l.

02:43.100 --> 02:50.840
Now we also need to send some data and that data of course should be our order for a given Bruegel configuration.

02:50.870 --> 02:54.020
Now the burger configuration is stored in the state.

02:54.020 --> 02:56.590
Here we have the ingredients we with the total price.

02:56.660 --> 02:58.450
So we get everything we need here.

02:58.610 --> 03:00.250
So that's super simple.

03:00.260 --> 03:06.840
We can create a new order object a javascript object which has ingredients.

03:06.920 --> 03:13.390
And here I simply want to use this state ingredients and which should have a price.

03:13.460 --> 03:21.160
This state price total price excuse me and just a little side note of course for your production or

03:21.160 --> 03:26.770
the application you should definitely calculate that final price on the server because you probably

03:26.770 --> 03:32.470
have your product stored on the server there to make sure that the user isn't manipulating the code

03:32.470 --> 03:36.280
before sending it and manipulates the price which you're using.

03:36.340 --> 03:39.280
Still here I'm going to use that price again.

03:39.360 --> 03:43.000
Be aware that this of course is not a set up you would use on a real app.

03:43.120 --> 03:47.050
There you would recalculate the price on the server.

03:47.050 --> 03:52.780
Now let's say for an order we also need some additional information which we can fetch right now because

03:52.780 --> 03:58.570
we don't have a check out for him but which I still want to fill on the back end with some dummy data.

03:58.810 --> 04:05.980
So there we have some customer data maybe so customer could be a javascript object where we have something

04:05.980 --> 04:07.390
like a name.

04:07.420 --> 04:10.940
So your does is Max Schwartz MILLER That's my name.

04:10.940 --> 04:12.140
Choose your name of course.

04:12.310 --> 04:18.950
Then we might have an address where we have something like street detest street.

04:18.970 --> 04:27.940
You might guess that I'm not living there and like sip code rolling over the keyboard and maybe countries

04:28.000 --> 04:31.990
for me that's Germany and feel free to add any additional data here.

04:32.200 --> 04:38.260
We might have that e-mail address so let's test that tested dot com here.

04:38.260 --> 04:45.070
And let's maybe add a number field next to customer delivery method which should be fosters so that

04:45.070 --> 04:49.750
we have like a choice between fast possible delivery and cheapest or something like that.

04:49.750 --> 04:52.140
So just some dummy order data.

04:52.150 --> 04:54.140
Feel free to pick any data you want.

04:54.190 --> 04:58.870
We'll later going to add a checkout page where we can actually fill those with some live by using a

04:58.870 --> 04:59.470
form.

04:59.500 --> 05:07.450
But for now let's simply build our dummy order like this does now is the order I want to store on the

05:07.450 --> 05:08.230
back end.

05:08.380 --> 05:15.040
So for the order year I'm going to pass this as a second argument for the post request.

05:15.040 --> 05:18.290
So this is the data which gets sent to dis Poth.

05:18.730 --> 05:24.010
And now let's add then Methot to see our response.

05:24.100 --> 05:28.010
And I'm just going to lock the response here for now.

05:28.390 --> 05:35.320
And that's all the ad the catch method where I also want to log the error for now.

05:35.350 --> 05:38.970
We're going to update both methods in a second.

05:39.370 --> 05:41.130
So let's see if this now works.

05:41.140 --> 05:43.370
We got our post request in place.

05:43.370 --> 05:45.170
We're sending a dummy order.

05:45.220 --> 05:50.040
We set up the access instance and we created the firebase project.

05:50.080 --> 05:54.420
Let's head over to our Bruegel application and let's build a burger here.

05:54.550 --> 05:57.470
Maybe this one let's click order now.

05:57.700 --> 06:00.580
And now up and continue the requests should be sent.

06:00.580 --> 06:03.500
So let's continue and that's looking good.

06:03.550 --> 06:06.850
I'm getting back a response status to 100.

06:07.210 --> 06:09.430
So let's check out firebase.

06:09.460 --> 06:15.700
It should update this page automatically and you should see the orders node in which you now see this

06:15.730 --> 06:18.160
cryptic name here.

06:18.160 --> 06:23.840
Now to use the post method firebase is automatically creating and managing a list here.

06:24.190 --> 06:30.760
And each list I didn't simply get a unique ID assigned and created by firebase automatically.

06:31.000 --> 06:35.220
If we expand this object we see the order data.

06:35.230 --> 06:42.580
We actually passed with the address to customer data delivery method and the ingredients of the burger

06:42.790 --> 06:44.710
and the ingredients looked good to me.

06:44.710 --> 06:50.640
Meat salad bacon that looks a lot like the burger we actually built here.

06:50.920 --> 06:52.170
So that's pretty great.

06:52.180 --> 06:54.880
We got our burgers saved on the back.

06:54.880 --> 06:56.780
We got our orders saved here.

06:56.830 --> 07:00.500
And the cool thing is of course that this data is staying here.

07:00.640 --> 07:06.700
If we reload Yep we reload this HDMI file and therefore of course lose the application state because

07:06.700 --> 07:08.550
the javascript state is gone.

07:08.770 --> 07:11.470
But of course our state on the server is still there.

07:11.470 --> 07:14.950
So now we could fetch the orders and output them to the user.

07:15.130 --> 07:21.610
And in a real application we would also as a producer rest the business owner.

07:21.640 --> 07:26.540
We would also probably handle the orders now and send that burger to the customer.

07:26.830 --> 07:28.500
So that's a POST request.

07:28.600 --> 07:36.100
Before we go onto error handling and debt stuff let's make sure that we also present something to the

07:36.100 --> 07:39.650
user whilst the request is on its way.

07:39.850 --> 07:44.090
And then let's make sure that we also get some data from the back end.
